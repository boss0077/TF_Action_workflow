#this declares the name of the pipeline
name: 'Terraform Infra Change Management pipeline with Github Actions'

# This workflow will run on pushes to the main branch and pull requests
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

#Least privilage practice where this is enough to checkout code, lint, validate, plan...
#this make sure the src or repo will not be modified.  
permissions:
  contents: read
  pull-requests: write

# Declaring/Injecting the environment variables and secreats 
env:
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY}}
  BUCKET_TF_STATE : ${{ secrets.BUCKET_TF_STATE}}

#top level key to define the workflows with specific environment 
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ~> 1.5.7
        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    #Validates the syntax and internal consistency of Terraform configuration files.
    - name: Terraform validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: | 
        if [ "${{ github.event.inputs.action }}" == "apply" ]; then terraform apply -auto-approve  
        elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then terraform destroy -auto-approve -input=false
        else
          echo "Invalid action"
          exit 1
        fi